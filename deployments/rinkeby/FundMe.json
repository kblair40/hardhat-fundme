{
  "address": "0x27C6d6fB734925E5254EB09C6Be01e8D048f52B6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc7ba1a707ad6270d1afda6546698105983e197a3e1f774b60ace8e28694480aa",
  "receipt": {
    "to": null,
    "from": "0xDdA55d8062feE87124a11b3382dF029E7288eB67",
    "contractAddress": "0x27C6d6fB734925E5254EB09C6Be01e8D048f52B6",
    "transactionIndex": 19,
    "gasUsed": "869224",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf1768d028be1aec1eaa890b8a4aaec517172b828a551519d3df7695e4cba2330",
    "transactionHash": "0xc7ba1a707ad6270d1afda6546698105983e197a3e1f774b60ace8e28694480aa",
    "logs": [],
    "blockNumber": 10944353,
    "cumulativeGasUsed": "3981007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "e9693330d59b5a1703634d1905fb8404",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kevin Blair\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// This can be more gas efficient than using 'require' in a modifier\\nerror FundMe__NotOwner(); // newer feature for solidity.  Expect to see 'require' in most old code examples\\n\\n/** @title A contract for crowd funding\\n * @author Kevin Blair\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // if variable is only set once, but in a different line than it was instantiated, we can use 'immutable' to save on gas\\n    address private immutable i_owner;\\n    // If we assign a variable in a contract only once, at compile time, we can make it a 'constant' to save on gas\\n    // txn cost with constant 21415 -> without constant 23515\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // modifier is a keyword that can be added to a function declaration to modify that function's functionality\\n    // functions that get the modifier do whatever is in the modifier first, then function body, then whetever is next in modifier\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner, \\\"Sender isnot owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        // immediately set owner to be the address the contract was deployed by/from\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happens if someone sends this contract ETH w/o calling the fund function?\\n    // receive and fallback will make sure the function gets called anyways.\\n\\n    receive() external payable {\\n        // just call the fund function\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        // same here, just call fund\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough!\\\"\\n        ); // if this fails, it will revert.  We can provide custom error msg as second arg\\n        s_funders.push(msg.sender); // msg.sender is the address sending the ether;\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // prevent anyone other than the owner from withdrawing\\n        // require(msg.sender == owner, \\\"Sender is not owner!\\\");\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset the array\\n        s_funders = new address[](0); // (0) says init array with no length/objects in it\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Add getters to clean up the api.  Users interacting with contract shouldn't need to know the s or i prefixes\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xed69c4e31536cf5b4aa0d255a49fabfb97f62c9573e23606e65e8e5de05d2b22\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// yarn add --dev @chainlink/contracts\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // NEED TO HAVE...\\n        // ABI -\\n        // ADDRESS - 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n\\n        // cast int256 to uint256, to match msg.value\\n        return uint256(price * 1e10); // 1**10 == 10000000000\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // dividing by 1e18 ensures the result has 18 decimal places.  Make sure division happens last.\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n\\n        // EX. 3000_000000000000000000 = ETH / USD price\\n        // We send 1_000000000000000000 ETH to this contract, which equals $3000 (above)\\n        // To get price, multiply them together, and divide by 1e18 to get the 18 decimal places\\n    }\\n}\\n\",\"keccak256\":\"0xd20e9abea2a8fb440b0951b74c94647baf85983fe43f47993ead49b27bf1fb52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610fbd380380610fbd83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e586101656000396000818161031b015261056a0152610e586000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107e6565b6102d1565b6040516100c1919061082c565b60405180910390f35b3480156100d657600080fd5b506100df610319565b005b3480156100ed57600080fd5b506100f6610559565b604051610103919061082c565b60405180910390f35b34801561011857600080fd5b50610121610566565b60405161012e9190610856565b60405180910390f35b34801561014357600080fd5b5061014c61058e565b60405161015991906108d0565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610917565b6105b8565b6040516101a09190610856565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461060090919063ffffffff16565b1015610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906109a1565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610449576000600182815481106103c4576103c36109c1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044190610a1f565b9150506103a1565b50600067ffffffffffffffff81111561046557610464610a68565b5b6040519080825280602002602001820160405280156104935781602001602082028036833780820191505090505b50600190805190602001906104a99291906106dc565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d090610ac8565b60006040518083038185875af1925050503d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050905080610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90610b29565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600182815481106105ce576105cd6109c1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061060c8361063c565b90506000670de0b6b3a764000085836106259190610b49565b61062f9190610bd2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610c90565b5050509150506402540be400816106d49190610d0b565b915050919050565b828054828255906000526020600020908101928215610755579160200282015b828111156107545782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106fc565b5b5090506107629190610766565b5090565b5b8082111561077f576000816000905550600101610767565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b382610788565b9050919050565b6107c3816107a8565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb610783565b5b600061080a848285016107d1565b91505092915050565b6000819050919050565b61082681610813565b82525050565b6000602082019050610841600083018461081d565b92915050565b610850816107a8565b82525050565b600060208201905061086b6000830184610847565b92915050565b6000819050919050565b600061089661089161088c84610788565b610871565b610788565b9050919050565b60006108a88261087b565b9050919050565b60006108ba8261089d565b9050919050565b6108ca816108af565b82525050565b60006020820190506108e560008301846108c1565b92915050565b6108f481610813565b81146108ff57600080fd5b50565b600081359050610911816108eb565b92915050565b60006020828403121561092d5761092c610783565b5b600061093b84828501610902565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b600061098b601383610944565b915061099682610955565b602082019050919050565b600060208201905081810360008301526109ba8161097e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a2a82610813565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a5d57610a5c6109f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab2600083610a97565b9150610abd82610aa2565b600082019050919050565b6000610ad382610aa5565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b13600b83610944565b9150610b1e82610add565b602082019050919050565b60006020820190508181036000830152610b4281610b06565b9050919050565b6000610b5482610813565b9150610b5f83610813565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b9857610b976109f0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bdd82610813565b9150610be883610813565b925082610bf857610bf7610ba3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2281610c03565b8114610c2d57600080fd5b50565b600081519050610c3f81610c19565b92915050565b6000819050919050565b610c5881610c45565b8114610c6357600080fd5b50565b600081519050610c7581610c4f565b92915050565b600081519050610c8a816108eb565b92915050565b600080600080600060a08688031215610cac57610cab610783565b5b6000610cba88828901610c30565b9550506020610ccb88828901610c66565b9450506040610cdc88828901610c7b565b9350506060610ced88828901610c7b565b9250506080610cfe88828901610c30565b9150509295509295909350565b6000610d1682610c45565b9150610d2183610c45565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6057610d5f6109f0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d9d57610d9c6109f0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dda57610dd96109f0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e1757610e166109f0565b5b82820290509291505056fea26469706673582212206b36e70eb49845bb15cf82fa32d091bcafee1de85fa40c70e235bab8087229a464736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107e6565b6102d1565b6040516100c1919061082c565b60405180910390f35b3480156100d657600080fd5b506100df610319565b005b3480156100ed57600080fd5b506100f6610559565b604051610103919061082c565b60405180910390f35b34801561011857600080fd5b50610121610566565b60405161012e9190610856565b60405180910390f35b34801561014357600080fd5b5061014c61058e565b60405161015991906108d0565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610917565b6105b8565b6040516101a09190610856565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461060090919063ffffffff16565b1015610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906109a1565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610449576000600182815481106103c4576103c36109c1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044190610a1f565b9150506103a1565b50600067ffffffffffffffff81111561046557610464610a68565b5b6040519080825280602002602001820160405280156104935781602001602082028036833780820191505090505b50600190805190602001906104a99291906106dc565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d090610ac8565b60006040518083038185875af1925050503d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050905080610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90610b29565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600182815481106105ce576105cd6109c1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061060c8361063c565b90506000670de0b6b3a764000085836106259190610b49565b61062f9190610bd2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610c90565b5050509150506402540be400816106d49190610d0b565b915050919050565b828054828255906000526020600020908101928215610755579160200282015b828111156107545782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106fc565b5b5090506107629190610766565b5090565b5b8082111561077f576000816000905550600101610767565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b382610788565b9050919050565b6107c3816107a8565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb610783565b5b600061080a848285016107d1565b91505092915050565b6000819050919050565b61082681610813565b82525050565b6000602082019050610841600083018461081d565b92915050565b610850816107a8565b82525050565b600060208201905061086b6000830184610847565b92915050565b6000819050919050565b600061089661089161088c84610788565b610871565b610788565b9050919050565b60006108a88261087b565b9050919050565b60006108ba8261089d565b9050919050565b6108ca816108af565b82525050565b60006020820190506108e560008301846108c1565b92915050565b6108f481610813565b81146108ff57600080fd5b50565b600081359050610911816108eb565b92915050565b60006020828403121561092d5761092c610783565b5b600061093b84828501610902565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b600061098b601383610944565b915061099682610955565b602082019050919050565b600060208201905081810360008301526109ba8161097e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a2a82610813565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a5d57610a5c6109f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab2600083610a97565b9150610abd82610aa2565b600082019050919050565b6000610ad382610aa5565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b13600b83610944565b9150610b1e82610add565b602082019050919050565b60006020820190508181036000830152610b4281610b06565b9050919050565b6000610b5482610813565b9150610b5f83610813565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b9857610b976109f0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bdd82610813565b9150610be883610813565b925082610bf857610bf7610ba3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2281610c03565b8114610c2d57600080fd5b50565b600081519050610c3f81610c19565b92915050565b6000819050919050565b610c5881610c45565b8114610c6357600080fd5b50565b600081519050610c7581610c4f565b92915050565b600081519050610c8a816108eb565b92915050565b600080600080600060a08688031215610cac57610cab610783565b5b6000610cba88828901610c30565b9550506020610ccb88828901610c66565b9450506040610cdc88828901610c7b565b9350506060610ced88828901610c7b565b9250506080610cfe88828901610c30565b9150509295509295909350565b6000610d1682610c45565b9150610d2183610c45565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6057610d5f6109f0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d9d57610d9c6109f0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dda57610dd96109f0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e1757610e166109f0565b5b82820290509291505056fea26469706673582212206b36e70eb49845bb15cf82fa32d091bcafee1de85fa40c70e235bab8087229a464736f6c63430008080033",
  "devdoc": {
    "author": "Kevin Blair",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}